// Generated by gencpp from file camera_msgs/MsgCamera.msg
// DO NOT EDIT!


#ifndef CAMERA_MSGS_MESSAGE_MSGCAMERA_H
#define CAMERA_MSGS_MESSAGE_MSGCAMERA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <camera_msgs/MsgObject.h>
#include <camera_msgs/MsgObject.h>
#include <camera_msgs/MsgObject.h>
#include <camera_msgs/MsgObject.h>
#include <camera_msgs/MsgObject.h>
#include <camera_msgs/MsgObject.h>
#include <camera_msgs/MsgObject.h>
#include <camera_msgs/MsgObject.h>

namespace camera_msgs
{
template <class ContainerAllocator>
struct MsgCamera_
{
  typedef MsgCamera_<ContainerAllocator> Type;

  MsgCamera_()
    : header()
    , camera11()
    , camera12()
    , camera13()
    , camera14()
    , camera41()
    , camera42()
    , camera43()
    , camera44()  {
    }
  MsgCamera_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , camera11(_alloc)
    , camera12(_alloc)
    , camera13(_alloc)
    , camera14(_alloc)
    , camera41(_alloc)
    , camera42(_alloc)
    , camera43(_alloc)
    , camera44(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera11_type;
  _camera11_type camera11;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera12_type;
  _camera12_type camera12;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera13_type;
  _camera13_type camera13;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera14_type;
  _camera14_type camera14;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera41_type;
  _camera41_type camera41;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera42_type;
  _camera42_type camera42;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera43_type;
  _camera43_type camera43;

   typedef std::vector< ::camera_msgs::MsgObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::camera_msgs::MsgObject_<ContainerAllocator> >::other >  _camera44_type;
  _camera44_type camera44;





  typedef boost::shared_ptr< ::camera_msgs::MsgCamera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_msgs::MsgCamera_<ContainerAllocator> const> ConstPtr;

}; // struct MsgCamera_

typedef ::camera_msgs::MsgCamera_<std::allocator<void> > MsgCamera;

typedef boost::shared_ptr< ::camera_msgs::MsgCamera > MsgCameraPtr;
typedef boost::shared_ptr< ::camera_msgs::MsgCamera const> MsgCameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_msgs::MsgCamera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_msgs::MsgCamera_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_msgs::MsgCamera_<ContainerAllocator1> & lhs, const ::camera_msgs::MsgCamera_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.camera11 == rhs.camera11 &&
    lhs.camera12 == rhs.camera12 &&
    lhs.camera13 == rhs.camera13 &&
    lhs.camera14 == rhs.camera14 &&
    lhs.camera41 == rhs.camera41 &&
    lhs.camera42 == rhs.camera42 &&
    lhs.camera43 == rhs.camera43 &&
    lhs.camera44 == rhs.camera44;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_msgs::MsgCamera_<ContainerAllocator1> & lhs, const ::camera_msgs::MsgCamera_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::camera_msgs::MsgCamera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_msgs::MsgCamera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_msgs::MsgCamera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_msgs::MsgCamera_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_msgs::MsgCamera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_msgs::MsgCamera_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_msgs::MsgCamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88f6649107b59053b7d1e61aca764255";
  }

  static const char* value(const ::camera_msgs::MsgCamera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88f6649107b59053ULL;
  static const uint64_t static_value2 = 0xb7d1e61aca764255ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_msgs::MsgCamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_msgs/MsgCamera";
  }

  static const char* value(const ::camera_msgs::MsgCamera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_msgs::MsgCamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"MsgObject[] camera11\n"
"MsgObject[] camera12\n"
"MsgObject[] camera13\n"
"MsgObject[] camera14\n"
"MsgObject[] camera41\n"
"MsgObject[] camera42\n"
"MsgObject[] camera43\n"
"MsgObject[] camera44\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: camera_msgs/MsgObject\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::camera_msgs::MsgCamera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_msgs::MsgCamera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.camera11);
      stream.next(m.camera12);
      stream.next(m.camera13);
      stream.next(m.camera14);
      stream.next(m.camera41);
      stream.next(m.camera42);
      stream.next(m.camera43);
      stream.next(m.camera44);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgCamera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_msgs::MsgCamera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_msgs::MsgCamera_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "camera11[]" << std::endl;
    for (size_t i = 0; i < v.camera11.size(); ++i)
    {
      s << indent << "  camera11[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera11[i]);
    }
    s << indent << "camera12[]" << std::endl;
    for (size_t i = 0; i < v.camera12.size(); ++i)
    {
      s << indent << "  camera12[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera12[i]);
    }
    s << indent << "camera13[]" << std::endl;
    for (size_t i = 0; i < v.camera13.size(); ++i)
    {
      s << indent << "  camera13[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera13[i]);
    }
    s << indent << "camera14[]" << std::endl;
    for (size_t i = 0; i < v.camera14.size(); ++i)
    {
      s << indent << "  camera14[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera14[i]);
    }
    s << indent << "camera41[]" << std::endl;
    for (size_t i = 0; i < v.camera41.size(); ++i)
    {
      s << indent << "  camera41[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera41[i]);
    }
    s << indent << "camera42[]" << std::endl;
    for (size_t i = 0; i < v.camera42.size(); ++i)
    {
      s << indent << "  camera42[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera42[i]);
    }
    s << indent << "camera43[]" << std::endl;
    for (size_t i = 0; i < v.camera43.size(); ++i)
    {
      s << indent << "  camera43[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera43[i]);
    }
    s << indent << "camera44[]" << std::endl;
    for (size_t i = 0; i < v.camera44.size(); ++i)
    {
      s << indent << "  camera44[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::camera_msgs::MsgObject_<ContainerAllocator> >::stream(s, indent + "    ", v.camera44[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_MSGS_MESSAGE_MSGCAMERA_H
