// Generated by gencpp from file radar_pa_msgs/radar_msg.msg
// DO NOT EDIT!


#ifndef RADAR_PA_MSGS_MESSAGE_RADAR_MSG_H
#define RADAR_PA_MSGS_MESSAGE_RADAR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <radar_pa_msgs/radar_msg_A.h>
#include <radar_pa_msgs/radar_msg_B.h>

namespace radar_pa_msgs
{
template <class ContainerAllocator>
struct radar_msg_
{
  typedef radar_msg_<ContainerAllocator> Type;

  radar_msg_()
    : header()
    , data_A()
    , data_B()  {
    }
  radar_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , data_A()
    , data_B()  {
  (void)_alloc;
      data_A.assign( ::radar_pa_msgs::radar_msg_A_<ContainerAllocator> (_alloc));

      data_B.assign( ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::radar_pa_msgs::radar_msg_A_<ContainerAllocator> , 48>  _data_A_type;
  _data_A_type data_A;

   typedef boost::array< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> , 48>  _data_B_type;
  _data_B_type data_B;





  typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg_<ContainerAllocator> const> ConstPtr;

}; // struct radar_msg_

typedef ::radar_pa_msgs::radar_msg_<std::allocator<void> > radar_msg;

typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg > radar_msgPtr;
typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg const> radar_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_pa_msgs::radar_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_pa_msgs::radar_msg_<ContainerAllocator1> & lhs, const ::radar_pa_msgs::radar_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.data_A == rhs.data_A &&
    lhs.data_B == rhs.data_B;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_pa_msgs::radar_msg_<ContainerAllocator1> & lhs, const ::radar_pa_msgs::radar_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_pa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_pa_msgs::radar_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_pa_msgs::radar_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_pa_msgs::radar_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61aec62f180ed30f21938b01f727fc33";
  }

  static const char* value(const ::radar_pa_msgs::radar_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61aec62f180ed30fULL;
  static const uint64_t static_value2 = 0x21938b01f727fc33ULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_pa_msgs/radar_msg";
  }

  static const char* value(const ::radar_pa_msgs::radar_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"radar_msg_A[48] data_A\n"
"radar_msg_B[48] data_B\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: radar_pa_msgs/radar_msg_A\n"
"uint8   message\n"
"uint32  ID\n"
"float32 distance\n"
"float32 velocity\n"
"float32 power\n"
"float32 angle\n"
"uint8   is_target\n"
"uint8   counter\n"
"\n"
"================================================================================\n"
"MSG: radar_pa_msgs/radar_msg_B\n"
"uint8   message\n"
"uint32  ID\n"
"float32 distance_deviation\n"
"float32 velocity_deviation\n"
"float32 angle_deviation\n"
"float32 proability_target\n"
"uint8   counter\n"
;
  }

  static const char* value(const ::radar_pa_msgs::radar_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.data_A);
      stream.next(m.data_B);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_pa_msgs::radar_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_pa_msgs::radar_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "data_A[]" << std::endl;
    for (size_t i = 0; i < v.data_A.size(); ++i)
    {
      s << indent << "  data_A[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::radar_pa_msgs::radar_msg_A_<ContainerAllocator> >::stream(s, indent + "    ", v.data_A[i]);
    }
    s << indent << "data_B[]" << std::endl;
    for (size_t i = 0; i < v.data_B.size(); ++i)
    {
      s << indent << "  data_B[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >::stream(s, indent + "    ", v.data_B[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_PA_MSGS_MESSAGE_RADAR_MSG_H
