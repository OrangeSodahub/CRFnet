// Generated by gencpp from file pb_msgs/ClusterRadar.msg
// DO NOT EDIT!


#ifndef PB_MSGS_MESSAGE_CLUSTERRADAR_H
#define PB_MSGS_MESSAGE_CLUSTERRADAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pb_msgs
{
template <class ContainerAllocator>
struct ClusterRadar_
{
  typedef ClusterRadar_<ContainerAllocator> Type;

  ClusterRadar_()
    : header()
    , target_id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , rcs(0.0)  {
    }
  ClusterRadar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , target_id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , rcs(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _target_id_type;
  _target_id_type target_id;

   typedef float _longitude_dist_type;
  _longitude_dist_type longitude_dist;

   typedef float _lateral_dist_type;
  _lateral_dist_type lateral_dist;

   typedef float _longitude_vel_type;
  _longitude_vel_type longitude_vel;

   typedef float _lateral_vel_type;
  _lateral_vel_type lateral_vel;

   typedef float _rcs_type;
  _rcs_type rcs;





  typedef boost::shared_ptr< ::pb_msgs::ClusterRadar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pb_msgs::ClusterRadar_<ContainerAllocator> const> ConstPtr;

}; // struct ClusterRadar_

typedef ::pb_msgs::ClusterRadar_<std::allocator<void> > ClusterRadar;

typedef boost::shared_ptr< ::pb_msgs::ClusterRadar > ClusterRadarPtr;
typedef boost::shared_ptr< ::pb_msgs::ClusterRadar const> ClusterRadarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pb_msgs::ClusterRadar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pb_msgs::ClusterRadar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pb_msgs::ClusterRadar_<ContainerAllocator1> & lhs, const ::pb_msgs::ClusterRadar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.target_id == rhs.target_id &&
    lhs.longitude_dist == rhs.longitude_dist &&
    lhs.lateral_dist == rhs.lateral_dist &&
    lhs.longitude_vel == rhs.longitude_vel &&
    lhs.lateral_vel == rhs.lateral_vel &&
    lhs.rcs == rhs.rcs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pb_msgs::ClusterRadar_<ContainerAllocator1> & lhs, const ::pb_msgs::ClusterRadar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pb_msgs::ClusterRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pb_msgs::ClusterRadar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pb_msgs::ClusterRadar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccd4422744fe0f3d40c70da9e394ee5d";
  }

  static const char* value(const ::pb_msgs::ClusterRadar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xccd4422744fe0f3dULL;
  static const uint64_t static_value2 = 0x40c70da9e394ee5dULL;
};

template<class ContainerAllocator>
struct DataType< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pb_msgs/ClusterRadar";
  }

  static const char* value(const ::pb_msgs::ClusterRadar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 target_id\n"
"float32 longitude_dist\n"
"float32 lateral_dist\n"
"float32 longitude_vel\n"
"float32 lateral_vel\n"
"float32 rcs\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::pb_msgs::ClusterRadar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.target_id);
      stream.next(m.longitude_dist);
      stream.next(m.lateral_dist);
      stream.next(m.longitude_vel);
      stream.next(m.lateral_vel);
      stream.next(m.rcs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClusterRadar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pb_msgs::ClusterRadar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pb_msgs::ClusterRadar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "target_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_id);
    s << indent << "longitude_dist: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_dist);
    s << indent << "lateral_dist: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_dist);
    s << indent << "longitude_vel: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_vel);
    s << indent << "lateral_vel: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_vel);
    s << indent << "rcs: ";
    Printer<float>::stream(s, indent + "  ", v.rcs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PB_MSGS_MESSAGE_CLUSTERRADAR_H
