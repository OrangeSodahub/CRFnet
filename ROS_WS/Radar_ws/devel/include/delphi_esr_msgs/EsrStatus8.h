// Generated by gencpp from file delphi_esr_msgs/EsrStatus8.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS8_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS8_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus8_
{
  typedef EsrStatus8_<ContainerAllocator> Type;

  EsrStatus8_()
    : header()
    , canmsg()
    , historyFault0(0)
    , historyFault1(0)
    , historyFault2(0)
    , historyFault3(0)
    , historyFault4(0)
    , historyFault5(0)
    , historyFault6(0)
    , historyFault7(0)  {
    }
  EsrStatus8_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , historyFault0(0)
    , historyFault1(0)
    , historyFault2(0)
    , historyFault3(0)
    , historyFault4(0)
    , historyFault5(0)
    , historyFault6(0)
    , historyFault7(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _historyFault0_type;
  _historyFault0_type historyFault0;

   typedef uint8_t _historyFault1_type;
  _historyFault1_type historyFault1;

   typedef uint8_t _historyFault2_type;
  _historyFault2_type historyFault2;

   typedef uint8_t _historyFault3_type;
  _historyFault3_type historyFault3;

   typedef uint8_t _historyFault4_type;
  _historyFault4_type historyFault4;

   typedef uint8_t _historyFault5_type;
  _historyFault5_type historyFault5;

   typedef uint8_t _historyFault6_type;
  _historyFault6_type historyFault6;

   typedef uint8_t _historyFault7_type;
  _historyFault7_type historyFault7;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus8_

typedef ::delphi_esr_msgs::EsrStatus8_<std::allocator<void> > EsrStatus8;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus8 > EsrStatus8Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus8 const> EsrStatus8ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.historyFault0 == rhs.historyFault0 &&
    lhs.historyFault1 == rhs.historyFault1 &&
    lhs.historyFault2 == rhs.historyFault2 &&
    lhs.historyFault3 == rhs.historyFault3 &&
    lhs.historyFault4 == rhs.historyFault4 &&
    lhs.historyFault5 == rhs.historyFault5 &&
    lhs.historyFault6 == rhs.historyFault6 &&
    lhs.historyFault7 == rhs.historyFault7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf0bfab7682c50ee2545f1e97677b621";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf0bfab7682c50eeULL;
  static const uint64_t static_value2 = 0x2545f1e97677b621ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus8";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# ESR status8\n"
"string      canmsg\n"
"uint8       historyFault0\n"
"uint8       historyFault1\n"
"uint8       historyFault2\n"
"uint8       historyFault3\n"
"uint8       historyFault4\n"
"uint8       historyFault5\n"
"uint8       historyFault6\n"
"uint8       historyFault7\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.historyFault0);
      stream.next(m.historyFault1);
      stream.next(m.historyFault2);
      stream.next(m.historyFault3);
      stream.next(m.historyFault4);
      stream.next(m.historyFault5);
      stream.next(m.historyFault6);
      stream.next(m.historyFault7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus8_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus8_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.canmsg);
    s << indent << "historyFault0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault0);
    s << indent << "historyFault1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault1);
    s << indent << "historyFault2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault2);
    s << indent << "historyFault3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault3);
    s << indent << "historyFault4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault4);
    s << indent << "historyFault5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault5);
    s << indent << "historyFault6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault6);
    s << indent << "historyFault7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.historyFault7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS8_H
