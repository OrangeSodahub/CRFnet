// Generated by gencpp from file delphi_esr_msgs/EsrStatus4.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS4_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS4_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus4_
{
  typedef EsrStatus4_<ContainerAllocator> Type;

  EsrStatus4_()
    : header()
    , canmsg()
    , rollingCount3(0)
    , mrlrMode(0)
    , patialBlockage(false)
    , sideLobeBlockage(false)
    , lrOnlyGratingLobeDet(false)
    , truckTargetDet(false)
    , pathIdAcc(0)
    , pathIdCmmbMove(0)
    , pathIdCmmbStat(0)
    , pathIdFcwMove(0)
    , pathIdFcwStat(0)
    , pathIdAccStat(0)
    , autoAlginAngle(0.0)  {
    }
  EsrStatus4_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , rollingCount3(0)
    , mrlrMode(0)
    , patialBlockage(false)
    , sideLobeBlockage(false)
    , lrOnlyGratingLobeDet(false)
    , truckTargetDet(false)
    , pathIdAcc(0)
    , pathIdCmmbMove(0)
    , pathIdCmmbStat(0)
    , pathIdFcwMove(0)
    , pathIdFcwStat(0)
    , pathIdAccStat(0)
    , autoAlginAngle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _rollingCount3_type;
  _rollingCount3_type rollingCount3;

   typedef uint8_t _mrlrMode_type;
  _mrlrMode_type mrlrMode;

   typedef uint8_t _patialBlockage_type;
  _patialBlockage_type patialBlockage;

   typedef uint8_t _sideLobeBlockage_type;
  _sideLobeBlockage_type sideLobeBlockage;

   typedef uint8_t _lrOnlyGratingLobeDet_type;
  _lrOnlyGratingLobeDet_type lrOnlyGratingLobeDet;

   typedef uint8_t _truckTargetDet_type;
  _truckTargetDet_type truckTargetDet;

   typedef uint8_t _pathIdAcc_type;
  _pathIdAcc_type pathIdAcc;

   typedef uint8_t _pathIdCmmbMove_type;
  _pathIdCmmbMove_type pathIdCmmbMove;

   typedef uint8_t _pathIdCmmbStat_type;
  _pathIdCmmbStat_type pathIdCmmbStat;

   typedef uint8_t _pathIdFcwMove_type;
  _pathIdFcwMove_type pathIdFcwMove;

   typedef uint8_t _pathIdFcwStat_type;
  _pathIdFcwStat_type pathIdFcwStat;

   typedef uint8_t _pathIdAccStat_type;
  _pathIdAccStat_type pathIdAccStat;

   typedef float _autoAlginAngle_type;
  _autoAlginAngle_type autoAlginAngle;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus4_

typedef ::delphi_esr_msgs::EsrStatus4_<std::allocator<void> > EsrStatus4;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus4 > EsrStatus4Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus4 const> EsrStatus4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.rollingCount3 == rhs.rollingCount3 &&
    lhs.mrlrMode == rhs.mrlrMode &&
    lhs.patialBlockage == rhs.patialBlockage &&
    lhs.sideLobeBlockage == rhs.sideLobeBlockage &&
    lhs.lrOnlyGratingLobeDet == rhs.lrOnlyGratingLobeDet &&
    lhs.truckTargetDet == rhs.truckTargetDet &&
    lhs.pathIdAcc == rhs.pathIdAcc &&
    lhs.pathIdCmmbMove == rhs.pathIdCmmbMove &&
    lhs.pathIdCmmbStat == rhs.pathIdCmmbStat &&
    lhs.pathIdFcwMove == rhs.pathIdFcwMove &&
    lhs.pathIdFcwStat == rhs.pathIdFcwStat &&
    lhs.pathIdAccStat == rhs.pathIdAccStat &&
    lhs.autoAlginAngle == rhs.autoAlginAngle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abec2ac03bbfc0ae47f593463cff96cc";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabec2ac03bbfc0aeULL;
  static const uint64_t static_value2 = 0x47f593463cff96ccULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus4";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# ESR status4\n"
"string      canmsg\n"
"uint8       rollingCount3\n"
"uint8       mrlrMode\n"
"bool        patialBlockage\n"
"bool        sideLobeBlockage\n"
"bool        lrOnlyGratingLobeDet\n"
"bool        truckTargetDet\n"
"uint8       pathIdAcc\n"
"uint8       pathIdCmmbMove\n"
"uint8       pathIdCmmbStat\n"
"uint8       pathIdFcwMove\n"
"uint8       pathIdFcwStat\n"
"uint8       pathIdAccStat\n"
"float32     autoAlginAngle\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.rollingCount3);
      stream.next(m.mrlrMode);
      stream.next(m.patialBlockage);
      stream.next(m.sideLobeBlockage);
      stream.next(m.lrOnlyGratingLobeDet);
      stream.next(m.truckTargetDet);
      stream.next(m.pathIdAcc);
      stream.next(m.pathIdCmmbMove);
      stream.next(m.pathIdCmmbStat);
      stream.next(m.pathIdFcwMove);
      stream.next(m.pathIdFcwStat);
      stream.next(m.pathIdAccStat);
      stream.next(m.autoAlginAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus4_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.canmsg);
    s << indent << "rollingCount3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rollingCount3);
    s << indent << "mrlrMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mrlrMode);
    s << indent << "patialBlockage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.patialBlockage);
    s << indent << "sideLobeBlockage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sideLobeBlockage);
    s << indent << "lrOnlyGratingLobeDet: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lrOnlyGratingLobeDet);
    s << indent << "truckTargetDet: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.truckTargetDet);
    s << indent << "pathIdAcc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathIdAcc);
    s << indent << "pathIdCmmbMove: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathIdCmmbMove);
    s << indent << "pathIdCmmbStat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathIdCmmbStat);
    s << indent << "pathIdFcwMove: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathIdFcwMove);
    s << indent << "pathIdFcwStat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathIdFcwStat);
    s << indent << "pathIdAccStat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pathIdAccStat);
    s << indent << "autoAlginAngle: ";
    Printer<float>::stream(s, indent + "  ", v.autoAlginAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS4_H
