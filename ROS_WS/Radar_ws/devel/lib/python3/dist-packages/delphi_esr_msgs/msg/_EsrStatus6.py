# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_esr_msgs/EsrStatus6.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EsrStatus6(genpy.Message):
  _md5sum = "fab6045bfaa2bc768f235e17159502ea"
  _type = "delphi_esr_msgs/EsrStatus6"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# ESR status6
string      canmsg
uint8       supply1P8V
uint8       supplyN5V
uint8       waveDiffA2D
uint8       swVersionDSP3rdByte
bool        verticalAlginUpdated
uint8       systemPowerMode
bool        foundTarget
bool        recommendUnconverge
uint8       factoryAlginStatus1
uint8       factoryAlginStatus2
float32     factoryMisAlginment
uint8       servAlginUpdatesDone
float32     verticalMisAlginment


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','canmsg','supply1P8V','supplyN5V','waveDiffA2D','swVersionDSP3rdByte','verticalAlginUpdated','systemPowerMode','foundTarget','recommendUnconverge','factoryAlginStatus1','factoryAlginStatus2','factoryMisAlginment','servAlginUpdatesDone','verticalMisAlginment']
  _slot_types = ['std_msgs/Header','string','uint8','uint8','uint8','uint8','bool','uint8','bool','bool','uint8','uint8','float32','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,canmsg,supply1P8V,supplyN5V,waveDiffA2D,swVersionDSP3rdByte,verticalAlginUpdated,systemPowerMode,foundTarget,recommendUnconverge,factoryAlginStatus1,factoryAlginStatus2,factoryMisAlginment,servAlginUpdatesDone,verticalMisAlginment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsrStatus6, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.canmsg is None:
        self.canmsg = ''
      if self.supply1P8V is None:
        self.supply1P8V = 0
      if self.supplyN5V is None:
        self.supplyN5V = 0
      if self.waveDiffA2D is None:
        self.waveDiffA2D = 0
      if self.swVersionDSP3rdByte is None:
        self.swVersionDSP3rdByte = 0
      if self.verticalAlginUpdated is None:
        self.verticalAlginUpdated = False
      if self.systemPowerMode is None:
        self.systemPowerMode = 0
      if self.foundTarget is None:
        self.foundTarget = False
      if self.recommendUnconverge is None:
        self.recommendUnconverge = False
      if self.factoryAlginStatus1 is None:
        self.factoryAlginStatus1 = 0
      if self.factoryAlginStatus2 is None:
        self.factoryAlginStatus2 = 0
      if self.factoryMisAlginment is None:
        self.factoryMisAlginment = 0.
      if self.servAlginUpdatesDone is None:
        self.servAlginUpdatesDone = 0
      if self.verticalMisAlginment is None:
        self.verticalMisAlginment = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.canmsg = ''
      self.supply1P8V = 0
      self.supplyN5V = 0
      self.waveDiffA2D = 0
      self.swVersionDSP3rdByte = 0
      self.verticalAlginUpdated = False
      self.systemPowerMode = 0
      self.foundTarget = False
      self.recommendUnconverge = False
      self.factoryAlginStatus1 = 0
      self.factoryAlginStatus2 = 0
      self.factoryMisAlginment = 0.
      self.servAlginUpdatesDone = 0
      self.verticalMisAlginment = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10BfBf().pack(_x.supply1P8V, _x.supplyN5V, _x.waveDiffA2D, _x.swVersionDSP3rdByte, _x.verticalAlginUpdated, _x.systemPowerMode, _x.foundTarget, _x.recommendUnconverge, _x.factoryAlginStatus1, _x.factoryAlginStatus2, _x.factoryMisAlginment, _x.servAlginUpdatesDone, _x.verticalMisAlginment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.supply1P8V, _x.supplyN5V, _x.waveDiffA2D, _x.swVersionDSP3rdByte, _x.verticalAlginUpdated, _x.systemPowerMode, _x.foundTarget, _x.recommendUnconverge, _x.factoryAlginStatus1, _x.factoryAlginStatus2, _x.factoryMisAlginment, _x.servAlginUpdatesDone, _x.verticalMisAlginment,) = _get_struct_10BfBf().unpack(str[start:end])
      self.verticalAlginUpdated = bool(self.verticalAlginUpdated)
      self.foundTarget = bool(self.foundTarget)
      self.recommendUnconverge = bool(self.recommendUnconverge)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10BfBf().pack(_x.supply1P8V, _x.supplyN5V, _x.waveDiffA2D, _x.swVersionDSP3rdByte, _x.verticalAlginUpdated, _x.systemPowerMode, _x.foundTarget, _x.recommendUnconverge, _x.factoryAlginStatus1, _x.factoryAlginStatus2, _x.factoryMisAlginment, _x.servAlginUpdatesDone, _x.verticalMisAlginment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.supply1P8V, _x.supplyN5V, _x.waveDiffA2D, _x.swVersionDSP3rdByte, _x.verticalAlginUpdated, _x.systemPowerMode, _x.foundTarget, _x.recommendUnconverge, _x.factoryAlginStatus1, _x.factoryAlginStatus2, _x.factoryMisAlginment, _x.servAlginUpdatesDone, _x.verticalMisAlginment,) = _get_struct_10BfBf().unpack(str[start:end])
      self.verticalAlginUpdated = bool(self.verticalAlginUpdated)
      self.foundTarget = bool(self.foundTarget)
      self.recommendUnconverge = bool(self.recommendUnconverge)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10BfBf = None
def _get_struct_10BfBf():
    global _struct_10BfBf
    if _struct_10BfBf is None:
        _struct_10BfBf = struct.Struct("<10BfBf")
    return _struct_10BfBf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
