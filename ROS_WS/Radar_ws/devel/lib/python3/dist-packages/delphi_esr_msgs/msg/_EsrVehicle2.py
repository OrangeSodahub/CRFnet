# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_esr_msgs/EsrVehicle2.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EsrVehicle2(genpy.Message):
  _md5sum = "034f7a7ed6d34122e2b7d043548b7f0d"
  _type = "delphi_esr_msgs/EsrVehicle2"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# ESR vehicle2
uint16      scan_index_ack
bool        use_angle_misalignment
bool        clear_faults
int8        high_yaw_angle
bool        mr_only_transmit
bool        lr_only_transmit
float32     angle_misalignment
float32     lateral_mounting_offset
bool        radar_cmd_radiate
bool        blockage_disable
uint8       maximum_tracks
uint8       turn_signal_status
bool        vehicle_speed_valid
bool        mmr_upside_down
uint8       grouping_mode
bool        wiper_status
bool        raw_data_enabled

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','scan_index_ack','use_angle_misalignment','clear_faults','high_yaw_angle','mr_only_transmit','lr_only_transmit','angle_misalignment','lateral_mounting_offset','radar_cmd_radiate','blockage_disable','maximum_tracks','turn_signal_status','vehicle_speed_valid','mmr_upside_down','grouping_mode','wiper_status','raw_data_enabled']
  _slot_types = ['std_msgs/Header','uint16','bool','bool','int8','bool','bool','float32','float32','bool','bool','uint8','uint8','bool','bool','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,scan_index_ack,use_angle_misalignment,clear_faults,high_yaw_angle,mr_only_transmit,lr_only_transmit,angle_misalignment,lateral_mounting_offset,radar_cmd_radiate,blockage_disable,maximum_tracks,turn_signal_status,vehicle_speed_valid,mmr_upside_down,grouping_mode,wiper_status,raw_data_enabled

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsrVehicle2, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.scan_index_ack is None:
        self.scan_index_ack = 0
      if self.use_angle_misalignment is None:
        self.use_angle_misalignment = False
      if self.clear_faults is None:
        self.clear_faults = False
      if self.high_yaw_angle is None:
        self.high_yaw_angle = 0
      if self.mr_only_transmit is None:
        self.mr_only_transmit = False
      if self.lr_only_transmit is None:
        self.lr_only_transmit = False
      if self.angle_misalignment is None:
        self.angle_misalignment = 0.
      if self.lateral_mounting_offset is None:
        self.lateral_mounting_offset = 0.
      if self.radar_cmd_radiate is None:
        self.radar_cmd_radiate = False
      if self.blockage_disable is None:
        self.blockage_disable = False
      if self.maximum_tracks is None:
        self.maximum_tracks = 0
      if self.turn_signal_status is None:
        self.turn_signal_status = 0
      if self.vehicle_speed_valid is None:
        self.vehicle_speed_valid = False
      if self.mmr_upside_down is None:
        self.mmr_upside_down = False
      if self.grouping_mode is None:
        self.grouping_mode = 0
      if self.wiper_status is None:
        self.wiper_status = False
      if self.raw_data_enabled is None:
        self.raw_data_enabled = False
    else:
      self.header = std_msgs.msg.Header()
      self.scan_index_ack = 0
      self.use_angle_misalignment = False
      self.clear_faults = False
      self.high_yaw_angle = 0
      self.mr_only_transmit = False
      self.lr_only_transmit = False
      self.angle_misalignment = 0.
      self.lateral_mounting_offset = 0.
      self.radar_cmd_radiate = False
      self.blockage_disable = False
      self.maximum_tracks = 0
      self.turn_signal_status = 0
      self.vehicle_speed_valid = False
      self.mmr_upside_down = False
      self.grouping_mode = 0
      self.wiper_status = False
      self.raw_data_enabled = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H2Bb2B2f9B().pack(_x.scan_index_ack, _x.use_angle_misalignment, _x.clear_faults, _x.high_yaw_angle, _x.mr_only_transmit, _x.lr_only_transmit, _x.angle_misalignment, _x.lateral_mounting_offset, _x.radar_cmd_radiate, _x.blockage_disable, _x.maximum_tracks, _x.turn_signal_status, _x.vehicle_speed_valid, _x.mmr_upside_down, _x.grouping_mode, _x.wiper_status, _x.raw_data_enabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.scan_index_ack, _x.use_angle_misalignment, _x.clear_faults, _x.high_yaw_angle, _x.mr_only_transmit, _x.lr_only_transmit, _x.angle_misalignment, _x.lateral_mounting_offset, _x.radar_cmd_radiate, _x.blockage_disable, _x.maximum_tracks, _x.turn_signal_status, _x.vehicle_speed_valid, _x.mmr_upside_down, _x.grouping_mode, _x.wiper_status, _x.raw_data_enabled,) = _get_struct_H2Bb2B2f9B().unpack(str[start:end])
      self.use_angle_misalignment = bool(self.use_angle_misalignment)
      self.clear_faults = bool(self.clear_faults)
      self.mr_only_transmit = bool(self.mr_only_transmit)
      self.lr_only_transmit = bool(self.lr_only_transmit)
      self.radar_cmd_radiate = bool(self.radar_cmd_radiate)
      self.blockage_disable = bool(self.blockage_disable)
      self.vehicle_speed_valid = bool(self.vehicle_speed_valid)
      self.mmr_upside_down = bool(self.mmr_upside_down)
      self.wiper_status = bool(self.wiper_status)
      self.raw_data_enabled = bool(self.raw_data_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H2Bb2B2f9B().pack(_x.scan_index_ack, _x.use_angle_misalignment, _x.clear_faults, _x.high_yaw_angle, _x.mr_only_transmit, _x.lr_only_transmit, _x.angle_misalignment, _x.lateral_mounting_offset, _x.radar_cmd_radiate, _x.blockage_disable, _x.maximum_tracks, _x.turn_signal_status, _x.vehicle_speed_valid, _x.mmr_upside_down, _x.grouping_mode, _x.wiper_status, _x.raw_data_enabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.scan_index_ack, _x.use_angle_misalignment, _x.clear_faults, _x.high_yaw_angle, _x.mr_only_transmit, _x.lr_only_transmit, _x.angle_misalignment, _x.lateral_mounting_offset, _x.radar_cmd_radiate, _x.blockage_disable, _x.maximum_tracks, _x.turn_signal_status, _x.vehicle_speed_valid, _x.mmr_upside_down, _x.grouping_mode, _x.wiper_status, _x.raw_data_enabled,) = _get_struct_H2Bb2B2f9B().unpack(str[start:end])
      self.use_angle_misalignment = bool(self.use_angle_misalignment)
      self.clear_faults = bool(self.clear_faults)
      self.mr_only_transmit = bool(self.mr_only_transmit)
      self.lr_only_transmit = bool(self.lr_only_transmit)
      self.radar_cmd_radiate = bool(self.radar_cmd_radiate)
      self.blockage_disable = bool(self.blockage_disable)
      self.vehicle_speed_valid = bool(self.vehicle_speed_valid)
      self.mmr_upside_down = bool(self.mmr_upside_down)
      self.wiper_status = bool(self.wiper_status)
      self.raw_data_enabled = bool(self.raw_data_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H2Bb2B2f9B = None
def _get_struct_H2Bb2B2f9B():
    global _struct_H2Bb2B2f9B
    if _struct_H2Bb2B2f9B is None:
        _struct_H2Bb2B2f9B = struct.Struct("<H2Bb2B2f9B")
    return _struct_H2Bb2B2f9B
