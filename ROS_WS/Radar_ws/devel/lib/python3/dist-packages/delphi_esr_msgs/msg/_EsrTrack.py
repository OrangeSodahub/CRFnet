# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_esr_msgs/EsrTrack.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EsrTrack(genpy.Message):
  _md5sum = "0a9beb5caea714982a56115450f110c7"
  _type = "delphi_esr_msgs/EsrTrack"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# ESR Track Msg
string        canmsg
uint8         track_ID
float32       track_lat_rate
bool          track_group_changed
uint8         track_status
float32       track_angle
float32       track_range
bool          track_bridge_object
bool          track_rolling_count
float32       track_width
float32       track_range_accel
uint8         track_med_range_mode
float32       track_range_rate


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','canmsg','track_ID','track_lat_rate','track_group_changed','track_status','track_angle','track_range','track_bridge_object','track_rolling_count','track_width','track_range_accel','track_med_range_mode','track_range_rate']
  _slot_types = ['std_msgs/Header','string','uint8','float32','bool','uint8','float32','float32','bool','bool','float32','float32','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,canmsg,track_ID,track_lat_rate,track_group_changed,track_status,track_angle,track_range,track_bridge_object,track_rolling_count,track_width,track_range_accel,track_med_range_mode,track_range_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsrTrack, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.canmsg is None:
        self.canmsg = ''
      if self.track_ID is None:
        self.track_ID = 0
      if self.track_lat_rate is None:
        self.track_lat_rate = 0.
      if self.track_group_changed is None:
        self.track_group_changed = False
      if self.track_status is None:
        self.track_status = 0
      if self.track_angle is None:
        self.track_angle = 0.
      if self.track_range is None:
        self.track_range = 0.
      if self.track_bridge_object is None:
        self.track_bridge_object = False
      if self.track_rolling_count is None:
        self.track_rolling_count = False
      if self.track_width is None:
        self.track_width = 0.
      if self.track_range_accel is None:
        self.track_range_accel = 0.
      if self.track_med_range_mode is None:
        self.track_med_range_mode = 0
      if self.track_range_rate is None:
        self.track_range_rate = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.canmsg = ''
      self.track_ID = 0
      self.track_lat_rate = 0.
      self.track_group_changed = False
      self.track_status = 0
      self.track_angle = 0.
      self.track_range = 0.
      self.track_bridge_object = False
      self.track_rolling_count = False
      self.track_width = 0.
      self.track_range_accel = 0.
      self.track_med_range_mode = 0
      self.track_range_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bf2B2f2B2fBf().pack(_x.track_ID, _x.track_lat_rate, _x.track_group_changed, _x.track_status, _x.track_angle, _x.track_range, _x.track_bridge_object, _x.track_rolling_count, _x.track_width, _x.track_range_accel, _x.track_med_range_mode, _x.track_range_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.track_ID, _x.track_lat_rate, _x.track_group_changed, _x.track_status, _x.track_angle, _x.track_range, _x.track_bridge_object, _x.track_rolling_count, _x.track_width, _x.track_range_accel, _x.track_med_range_mode, _x.track_range_rate,) = _get_struct_Bf2B2f2B2fBf().unpack(str[start:end])
      self.track_group_changed = bool(self.track_group_changed)
      self.track_bridge_object = bool(self.track_bridge_object)
      self.track_rolling_count = bool(self.track_rolling_count)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.canmsg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bf2B2f2B2fBf().pack(_x.track_ID, _x.track_lat_rate, _x.track_group_changed, _x.track_status, _x.track_angle, _x.track_range, _x.track_bridge_object, _x.track_rolling_count, _x.track_width, _x.track_range_accel, _x.track_med_range_mode, _x.track_range_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canmsg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.canmsg = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.track_ID, _x.track_lat_rate, _x.track_group_changed, _x.track_status, _x.track_angle, _x.track_range, _x.track_bridge_object, _x.track_rolling_count, _x.track_width, _x.track_range_accel, _x.track_med_range_mode, _x.track_range_rate,) = _get_struct_Bf2B2f2B2fBf().unpack(str[start:end])
      self.track_group_changed = bool(self.track_group_changed)
      self.track_bridge_object = bool(self.track_bridge_object)
      self.track_rolling_count = bool(self.track_rolling_count)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Bf2B2f2B2fBf = None
def _get_struct_Bf2B2f2B2fBf():
    global _struct_Bf2B2f2B2fBf
    if _struct_Bf2B2f2B2fBf is None:
        _struct_Bf2B2f2B2fBf = struct.Struct("<Bf2B2f2B2fBf")
    return _struct_Bf2B2f2B2fBf
