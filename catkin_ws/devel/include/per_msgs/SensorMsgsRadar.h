// Generated by gencpp from file per_msgs/SensorMsgsRadar.msg
// DO NOT EDIT!


#ifndef PER_MSGS_MESSAGE_SENSORMSGSRADAR_H
#define PER_MSGS_MESSAGE_SENSORMSGSRADAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace per_msgs
{
template <class ContainerAllocator>
struct SensorMsgsRadar_
{
  typedef SensorMsgsRadar_<ContainerAllocator> Type;

  SensorMsgsRadar_()
    : header()
    , range(0.0)
    , total_front_esr_tracks(0.0)
    , total_front_right_esr_tracks(0.0)
    , total_front_left_esr_tracks(0.0)
    , front_esr_tracker_counter(0.0)
    , front_left_esr_tracker_counter(0.0)
    , front_right_esr_tracker_counter(0.0)
    , total_rear_sbmp_tracks(0.0)
    , rear_sbmp_tracker_counter(0.0)
    , rear_sbmp_tracklist(0.0)
    , total_fsm4_tracks(0.0)
    , fsm4_tracklist(0.0)
    , fsm4_tracker_counter(0.0)
    , front_esr_tracklist()
    , front_right_esr_tracklist()
    , front_left_esr_tracklist()  {
    }
  SensorMsgsRadar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , range(0.0)
    , total_front_esr_tracks(0.0)
    , total_front_right_esr_tracks(0.0)
    , total_front_left_esr_tracks(0.0)
    , front_esr_tracker_counter(0.0)
    , front_left_esr_tracker_counter(0.0)
    , front_right_esr_tracker_counter(0.0)
    , total_rear_sbmp_tracks(0.0)
    , rear_sbmp_tracker_counter(0.0)
    , rear_sbmp_tracklist(0.0)
    , total_fsm4_tracks(0.0)
    , fsm4_tracklist(0.0)
    , fsm4_tracker_counter(0.0)
    , front_esr_tracklist(_alloc)
    , front_right_esr_tracklist(_alloc)
    , front_left_esr_tracklist(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _range_type;
  _range_type range;

   typedef float _total_front_esr_tracks_type;
  _total_front_esr_tracks_type total_front_esr_tracks;

   typedef float _total_front_right_esr_tracks_type;
  _total_front_right_esr_tracks_type total_front_right_esr_tracks;

   typedef float _total_front_left_esr_tracks_type;
  _total_front_left_esr_tracks_type total_front_left_esr_tracks;

   typedef float _front_esr_tracker_counter_type;
  _front_esr_tracker_counter_type front_esr_tracker_counter;

   typedef float _front_left_esr_tracker_counter_type;
  _front_left_esr_tracker_counter_type front_left_esr_tracker_counter;

   typedef float _front_right_esr_tracker_counter_type;
  _front_right_esr_tracker_counter_type front_right_esr_tracker_counter;

   typedef float _total_rear_sbmp_tracks_type;
  _total_rear_sbmp_tracks_type total_rear_sbmp_tracks;

   typedef float _rear_sbmp_tracker_counter_type;
  _rear_sbmp_tracker_counter_type rear_sbmp_tracker_counter;

   typedef float _rear_sbmp_tracklist_type;
  _rear_sbmp_tracklist_type rear_sbmp_tracklist;

   typedef float _total_fsm4_tracks_type;
  _total_fsm4_tracks_type total_fsm4_tracks;

   typedef float _fsm4_tracklist_type;
  _fsm4_tracklist_type fsm4_tracklist;

   typedef float _fsm4_tracker_counter_type;
  _fsm4_tracker_counter_type fsm4_tracker_counter;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _front_esr_tracklist_type;
  _front_esr_tracklist_type front_esr_tracklist;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _front_right_esr_tracklist_type;
  _front_right_esr_tracklist_type front_right_esr_tracklist;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _front_left_esr_tracklist_type;
  _front_left_esr_tracklist_type front_left_esr_tracklist;





  typedef boost::shared_ptr< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> const> ConstPtr;

}; // struct SensorMsgsRadar_

typedef ::per_msgs::SensorMsgsRadar_<std::allocator<void> > SensorMsgsRadar;

typedef boost::shared_ptr< ::per_msgs::SensorMsgsRadar > SensorMsgsRadarPtr;
typedef boost::shared_ptr< ::per_msgs::SensorMsgsRadar const> SensorMsgsRadarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::per_msgs::SensorMsgsRadar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::per_msgs::SensorMsgsRadar_<ContainerAllocator1> & lhs, const ::per_msgs::SensorMsgsRadar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.range == rhs.range &&
    lhs.total_front_esr_tracks == rhs.total_front_esr_tracks &&
    lhs.total_front_right_esr_tracks == rhs.total_front_right_esr_tracks &&
    lhs.total_front_left_esr_tracks == rhs.total_front_left_esr_tracks &&
    lhs.front_esr_tracker_counter == rhs.front_esr_tracker_counter &&
    lhs.front_left_esr_tracker_counter == rhs.front_left_esr_tracker_counter &&
    lhs.front_right_esr_tracker_counter == rhs.front_right_esr_tracker_counter &&
    lhs.total_rear_sbmp_tracks == rhs.total_rear_sbmp_tracks &&
    lhs.rear_sbmp_tracker_counter == rhs.rear_sbmp_tracker_counter &&
    lhs.rear_sbmp_tracklist == rhs.rear_sbmp_tracklist &&
    lhs.total_fsm4_tracks == rhs.total_fsm4_tracks &&
    lhs.fsm4_tracklist == rhs.fsm4_tracklist &&
    lhs.fsm4_tracker_counter == rhs.fsm4_tracker_counter &&
    lhs.front_esr_tracklist == rhs.front_esr_tracklist &&
    lhs.front_right_esr_tracklist == rhs.front_right_esr_tracklist &&
    lhs.front_left_esr_tracklist == rhs.front_left_esr_tracklist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::per_msgs::SensorMsgsRadar_<ContainerAllocator1> & lhs, const ::per_msgs::SensorMsgsRadar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace per_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b695fa4723d4915d6ab0e488542236e";
  }

  static const char* value(const ::per_msgs::SensorMsgsRadar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b695fa4723d4915ULL;
  static const uint64_t static_value2 = 0xd6ab0e488542236eULL;
};

template<class ContainerAllocator>
struct DataType< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "per_msgs/SensorMsgsRadar";
  }

  static const char* value(const ::per_msgs::SensorMsgsRadar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 range  # meters\n"
"float32 total_front_esr_tracks\n"
"float32 total_front_right_esr_tracks\n"
"float32 total_front_left_esr_tracks\n"
"float32 front_esr_tracker_counter\n"
"float32 front_left_esr_tracker_counter\n"
"float32 front_right_esr_tracker_counter\n"
"float32 total_rear_sbmp_tracks\n"
"float32 rear_sbmp_tracker_counter\n"
"float32 rear_sbmp_tracklist\n"
"float32 total_fsm4_tracks\n"
"float32 fsm4_tracklist\n"
"float32 fsm4_tracker_counter\n"
"float32[] front_esr_tracklist\n"
"float32[] front_right_esr_tracklist\n"
"float32[] front_left_esr_tracklist\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::per_msgs::SensorMsgsRadar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.range);
      stream.next(m.total_front_esr_tracks);
      stream.next(m.total_front_right_esr_tracks);
      stream.next(m.total_front_left_esr_tracks);
      stream.next(m.front_esr_tracker_counter);
      stream.next(m.front_left_esr_tracker_counter);
      stream.next(m.front_right_esr_tracker_counter);
      stream.next(m.total_rear_sbmp_tracks);
      stream.next(m.rear_sbmp_tracker_counter);
      stream.next(m.rear_sbmp_tracklist);
      stream.next(m.total_fsm4_tracks);
      stream.next(m.fsm4_tracklist);
      stream.next(m.fsm4_tracker_counter);
      stream.next(m.front_esr_tracklist);
      stream.next(m.front_right_esr_tracklist);
      stream.next(m.front_left_esr_tracklist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorMsgsRadar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::per_msgs::SensorMsgsRadar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::per_msgs::SensorMsgsRadar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "total_front_esr_tracks: ";
    Printer<float>::stream(s, indent + "  ", v.total_front_esr_tracks);
    s << indent << "total_front_right_esr_tracks: ";
    Printer<float>::stream(s, indent + "  ", v.total_front_right_esr_tracks);
    s << indent << "total_front_left_esr_tracks: ";
    Printer<float>::stream(s, indent + "  ", v.total_front_left_esr_tracks);
    s << indent << "front_esr_tracker_counter: ";
    Printer<float>::stream(s, indent + "  ", v.front_esr_tracker_counter);
    s << indent << "front_left_esr_tracker_counter: ";
    Printer<float>::stream(s, indent + "  ", v.front_left_esr_tracker_counter);
    s << indent << "front_right_esr_tracker_counter: ";
    Printer<float>::stream(s, indent + "  ", v.front_right_esr_tracker_counter);
    s << indent << "total_rear_sbmp_tracks: ";
    Printer<float>::stream(s, indent + "  ", v.total_rear_sbmp_tracks);
    s << indent << "rear_sbmp_tracker_counter: ";
    Printer<float>::stream(s, indent + "  ", v.rear_sbmp_tracker_counter);
    s << indent << "rear_sbmp_tracklist: ";
    Printer<float>::stream(s, indent + "  ", v.rear_sbmp_tracklist);
    s << indent << "total_fsm4_tracks: ";
    Printer<float>::stream(s, indent + "  ", v.total_fsm4_tracks);
    s << indent << "fsm4_tracklist: ";
    Printer<float>::stream(s, indent + "  ", v.fsm4_tracklist);
    s << indent << "fsm4_tracker_counter: ";
    Printer<float>::stream(s, indent + "  ", v.fsm4_tracker_counter);
    s << indent << "front_esr_tracklist[]" << std::endl;
    for (size_t i = 0; i < v.front_esr_tracklist.size(); ++i)
    {
      s << indent << "  front_esr_tracklist[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.front_esr_tracklist[i]);
    }
    s << indent << "front_right_esr_tracklist[]" << std::endl;
    for (size_t i = 0; i < v.front_right_esr_tracklist.size(); ++i)
    {
      s << indent << "  front_right_esr_tracklist[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.front_right_esr_tracklist[i]);
    }
    s << indent << "front_left_esr_tracklist[]" << std::endl;
    for (size_t i = 0; i < v.front_left_esr_tracklist.size(); ++i)
    {
      s << indent << "  front_left_esr_tracklist[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.front_left_esr_tracklist[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PER_MSGS_MESSAGE_SENSORMSGSRADAR_H
