# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from per_msgs/SensorMsgsRadar.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SensorMsgsRadar(genpy.Message):
  _md5sum = "5b695fa4723d4915d6ab0e488542236e"
  _type = "per_msgs/SensorMsgsRadar"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float32 range  # meters
float32 total_front_esr_tracks
float32 total_front_right_esr_tracks
float32 total_front_left_esr_tracks
float32 front_esr_tracker_counter
float32 front_left_esr_tracker_counter
float32 front_right_esr_tracker_counter
float32 total_rear_sbmp_tracks
float32 rear_sbmp_tracker_counter
float32 rear_sbmp_tracklist
float32 total_fsm4_tracks
float32 fsm4_tracklist
float32 fsm4_tracker_counter
float32[] front_esr_tracklist
float32[] front_right_esr_tracklist
float32[] front_left_esr_tracklist
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','range','total_front_esr_tracks','total_front_right_esr_tracks','total_front_left_esr_tracks','front_esr_tracker_counter','front_left_esr_tracker_counter','front_right_esr_tracker_counter','total_rear_sbmp_tracks','rear_sbmp_tracker_counter','rear_sbmp_tracklist','total_fsm4_tracks','fsm4_tracklist','fsm4_tracker_counter','front_esr_tracklist','front_right_esr_tracklist','front_left_esr_tracklist']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,range,total_front_esr_tracks,total_front_right_esr_tracks,total_front_left_esr_tracks,front_esr_tracker_counter,front_left_esr_tracker_counter,front_right_esr_tracker_counter,total_rear_sbmp_tracks,rear_sbmp_tracker_counter,rear_sbmp_tracklist,total_fsm4_tracks,fsm4_tracklist,fsm4_tracker_counter,front_esr_tracklist,front_right_esr_tracklist,front_left_esr_tracklist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorMsgsRadar, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.range is None:
        self.range = 0.
      if self.total_front_esr_tracks is None:
        self.total_front_esr_tracks = 0.
      if self.total_front_right_esr_tracks is None:
        self.total_front_right_esr_tracks = 0.
      if self.total_front_left_esr_tracks is None:
        self.total_front_left_esr_tracks = 0.
      if self.front_esr_tracker_counter is None:
        self.front_esr_tracker_counter = 0.
      if self.front_left_esr_tracker_counter is None:
        self.front_left_esr_tracker_counter = 0.
      if self.front_right_esr_tracker_counter is None:
        self.front_right_esr_tracker_counter = 0.
      if self.total_rear_sbmp_tracks is None:
        self.total_rear_sbmp_tracks = 0.
      if self.rear_sbmp_tracker_counter is None:
        self.rear_sbmp_tracker_counter = 0.
      if self.rear_sbmp_tracklist is None:
        self.rear_sbmp_tracklist = 0.
      if self.total_fsm4_tracks is None:
        self.total_fsm4_tracks = 0.
      if self.fsm4_tracklist is None:
        self.fsm4_tracklist = 0.
      if self.fsm4_tracker_counter is None:
        self.fsm4_tracker_counter = 0.
      if self.front_esr_tracklist is None:
        self.front_esr_tracklist = []
      if self.front_right_esr_tracklist is None:
        self.front_right_esr_tracklist = []
      if self.front_left_esr_tracklist is None:
        self.front_left_esr_tracklist = []
    else:
      self.header = std_msgs.msg.Header()
      self.range = 0.
      self.total_front_esr_tracks = 0.
      self.total_front_right_esr_tracks = 0.
      self.total_front_left_esr_tracks = 0.
      self.front_esr_tracker_counter = 0.
      self.front_left_esr_tracker_counter = 0.
      self.front_right_esr_tracker_counter = 0.
      self.total_rear_sbmp_tracks = 0.
      self.rear_sbmp_tracker_counter = 0.
      self.rear_sbmp_tracklist = 0.
      self.total_fsm4_tracks = 0.
      self.fsm4_tracklist = 0.
      self.fsm4_tracker_counter = 0.
      self.front_esr_tracklist = []
      self.front_right_esr_tracklist = []
      self.front_left_esr_tracklist = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13f().pack(_x.range, _x.total_front_esr_tracks, _x.total_front_right_esr_tracks, _x.total_front_left_esr_tracks, _x.front_esr_tracker_counter, _x.front_left_esr_tracker_counter, _x.front_right_esr_tracker_counter, _x.total_rear_sbmp_tracks, _x.rear_sbmp_tracker_counter, _x.rear_sbmp_tracklist, _x.total_fsm4_tracks, _x.fsm4_tracklist, _x.fsm4_tracker_counter))
      length = len(self.front_esr_tracklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_esr_tracklist))
      length = len(self.front_right_esr_tracklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_right_esr_tracklist))
      length = len(self.front_left_esr_tracklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.front_left_esr_tracklist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.range, _x.total_front_esr_tracks, _x.total_front_right_esr_tracks, _x.total_front_left_esr_tracks, _x.front_esr_tracker_counter, _x.front_left_esr_tracker_counter, _x.front_right_esr_tracker_counter, _x.total_rear_sbmp_tracks, _x.rear_sbmp_tracker_counter, _x.rear_sbmp_tracklist, _x.total_fsm4_tracks, _x.fsm4_tracklist, _x.fsm4_tracker_counter,) = _get_struct_13f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_esr_tracklist = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_right_esr_tracklist = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_left_esr_tracklist = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13f().pack(_x.range, _x.total_front_esr_tracks, _x.total_front_right_esr_tracks, _x.total_front_left_esr_tracks, _x.front_esr_tracker_counter, _x.front_left_esr_tracker_counter, _x.front_right_esr_tracker_counter, _x.total_rear_sbmp_tracks, _x.rear_sbmp_tracker_counter, _x.rear_sbmp_tracklist, _x.total_fsm4_tracks, _x.fsm4_tracklist, _x.fsm4_tracker_counter))
      length = len(self.front_esr_tracklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_esr_tracklist.tostring())
      length = len(self.front_right_esr_tracklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_right_esr_tracklist.tostring())
      length = len(self.front_left_esr_tracklist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.front_left_esr_tracklist.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.range, _x.total_front_esr_tracks, _x.total_front_right_esr_tracks, _x.total_front_left_esr_tracks, _x.front_esr_tracker_counter, _x.front_left_esr_tracker_counter, _x.front_right_esr_tracker_counter, _x.total_rear_sbmp_tracks, _x.rear_sbmp_tracker_counter, _x.rear_sbmp_tracklist, _x.total_fsm4_tracks, _x.fsm4_tracklist, _x.fsm4_tracker_counter,) = _get_struct_13f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_esr_tracklist = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_right_esr_tracklist = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.front_left_esr_tracklist = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13f = None
def _get_struct_13f():
    global _struct_13f
    if _struct_13f is None:
        _struct_13f = struct.Struct("<13f")
    return _struct_13f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
