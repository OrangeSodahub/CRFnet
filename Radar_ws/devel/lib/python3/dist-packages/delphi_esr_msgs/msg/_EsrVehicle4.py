# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_esr_msgs/EsrVehicle4.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EsrVehicle4(genpy.Message):
  _md5sum = "0805b9094a6d63c8c5d196257252ccdb"
  _type = "delphi_esr_msgs/EsrVehicle4"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# ESR vehicle4
bool        fac_align_cmd_1
bool        fac_align_cmd_2
uint8       fac_align_max_nt
uint8       fac_align_samp_req
int8        fac_tgt_mtg_offset
int8        fac_tgt_mtg_space_hor
int8        fac_tgt_mtg_space_ver
float32     fac_tgt_range_1
float32     fac_tgt_range_r2m
float32     fac_tgt_range_m2t

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','fac_align_cmd_1','fac_align_cmd_2','fac_align_max_nt','fac_align_samp_req','fac_tgt_mtg_offset','fac_tgt_mtg_space_hor','fac_tgt_mtg_space_ver','fac_tgt_range_1','fac_tgt_range_r2m','fac_tgt_range_m2t']
  _slot_types = ['std_msgs/Header','bool','bool','uint8','uint8','int8','int8','int8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fac_align_cmd_1,fac_align_cmd_2,fac_align_max_nt,fac_align_samp_req,fac_tgt_mtg_offset,fac_tgt_mtg_space_hor,fac_tgt_mtg_space_ver,fac_tgt_range_1,fac_tgt_range_r2m,fac_tgt_range_m2t

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsrVehicle4, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fac_align_cmd_1 is None:
        self.fac_align_cmd_1 = False
      if self.fac_align_cmd_2 is None:
        self.fac_align_cmd_2 = False
      if self.fac_align_max_nt is None:
        self.fac_align_max_nt = 0
      if self.fac_align_samp_req is None:
        self.fac_align_samp_req = 0
      if self.fac_tgt_mtg_offset is None:
        self.fac_tgt_mtg_offset = 0
      if self.fac_tgt_mtg_space_hor is None:
        self.fac_tgt_mtg_space_hor = 0
      if self.fac_tgt_mtg_space_ver is None:
        self.fac_tgt_mtg_space_ver = 0
      if self.fac_tgt_range_1 is None:
        self.fac_tgt_range_1 = 0.
      if self.fac_tgt_range_r2m is None:
        self.fac_tgt_range_r2m = 0.
      if self.fac_tgt_range_m2t is None:
        self.fac_tgt_range_m2t = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.fac_align_cmd_1 = False
      self.fac_align_cmd_2 = False
      self.fac_align_max_nt = 0
      self.fac_align_samp_req = 0
      self.fac_tgt_mtg_offset = 0
      self.fac_tgt_mtg_space_hor = 0
      self.fac_tgt_mtg_space_ver = 0
      self.fac_tgt_range_1 = 0.
      self.fac_tgt_range_r2m = 0.
      self.fac_tgt_range_m2t = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B3b3f().pack(_x.fac_align_cmd_1, _x.fac_align_cmd_2, _x.fac_align_max_nt, _x.fac_align_samp_req, _x.fac_tgt_mtg_offset, _x.fac_tgt_mtg_space_hor, _x.fac_tgt_mtg_space_ver, _x.fac_tgt_range_1, _x.fac_tgt_range_r2m, _x.fac_tgt_range_m2t))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.fac_align_cmd_1, _x.fac_align_cmd_2, _x.fac_align_max_nt, _x.fac_align_samp_req, _x.fac_tgt_mtg_offset, _x.fac_tgt_mtg_space_hor, _x.fac_tgt_mtg_space_ver, _x.fac_tgt_range_1, _x.fac_tgt_range_r2m, _x.fac_tgt_range_m2t,) = _get_struct_4B3b3f().unpack(str[start:end])
      self.fac_align_cmd_1 = bool(self.fac_align_cmd_1)
      self.fac_align_cmd_2 = bool(self.fac_align_cmd_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B3b3f().pack(_x.fac_align_cmd_1, _x.fac_align_cmd_2, _x.fac_align_max_nt, _x.fac_align_samp_req, _x.fac_tgt_mtg_offset, _x.fac_tgt_mtg_space_hor, _x.fac_tgt_mtg_space_ver, _x.fac_tgt_range_1, _x.fac_tgt_range_r2m, _x.fac_tgt_range_m2t))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.fac_align_cmd_1, _x.fac_align_cmd_2, _x.fac_align_max_nt, _x.fac_align_samp_req, _x.fac_tgt_mtg_offset, _x.fac_tgt_mtg_space_hor, _x.fac_tgt_mtg_space_ver, _x.fac_tgt_range_1, _x.fac_tgt_range_r2m, _x.fac_tgt_range_m2t,) = _get_struct_4B3b3f().unpack(str[start:end])
      self.fac_align_cmd_1 = bool(self.fac_align_cmd_1)
      self.fac_align_cmd_2 = bool(self.fac_align_cmd_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B3b3f = None
def _get_struct_4B3b3f():
    global _struct_4B3b3f
    if _struct_4B3b3f is None:
        _struct_4B3b3f = struct.Struct("<4B3b3f")
    return _struct_4B3b3f
