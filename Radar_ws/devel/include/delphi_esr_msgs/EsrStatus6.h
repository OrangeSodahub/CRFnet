// Generated by gencpp from file delphi_esr_msgs/EsrStatus6.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS6_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS6_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus6_
{
  typedef EsrStatus6_<ContainerAllocator> Type;

  EsrStatus6_()
    : header()
    , canmsg()
    , supply1P8V(0)
    , supplyN5V(0)
    , waveDiffA2D(0)
    , swVersionDSP3rdByte(0)
    , verticalAlginUpdated(false)
    , systemPowerMode(0)
    , foundTarget(false)
    , recommendUnconverge(false)
    , factoryAlginStatus1(0)
    , factoryAlginStatus2(0)
    , factoryMisAlginment(0.0)
    , servAlginUpdatesDone(0)
    , verticalMisAlginment(0.0)  {
    }
  EsrStatus6_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , supply1P8V(0)
    , supplyN5V(0)
    , waveDiffA2D(0)
    , swVersionDSP3rdByte(0)
    , verticalAlginUpdated(false)
    , systemPowerMode(0)
    , foundTarget(false)
    , recommendUnconverge(false)
    , factoryAlginStatus1(0)
    , factoryAlginStatus2(0)
    , factoryMisAlginment(0.0)
    , servAlginUpdatesDone(0)
    , verticalMisAlginment(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _supply1P8V_type;
  _supply1P8V_type supply1P8V;

   typedef uint8_t _supplyN5V_type;
  _supplyN5V_type supplyN5V;

   typedef uint8_t _waveDiffA2D_type;
  _waveDiffA2D_type waveDiffA2D;

   typedef uint8_t _swVersionDSP3rdByte_type;
  _swVersionDSP3rdByte_type swVersionDSP3rdByte;

   typedef uint8_t _verticalAlginUpdated_type;
  _verticalAlginUpdated_type verticalAlginUpdated;

   typedef uint8_t _systemPowerMode_type;
  _systemPowerMode_type systemPowerMode;

   typedef uint8_t _foundTarget_type;
  _foundTarget_type foundTarget;

   typedef uint8_t _recommendUnconverge_type;
  _recommendUnconverge_type recommendUnconverge;

   typedef uint8_t _factoryAlginStatus1_type;
  _factoryAlginStatus1_type factoryAlginStatus1;

   typedef uint8_t _factoryAlginStatus2_type;
  _factoryAlginStatus2_type factoryAlginStatus2;

   typedef float _factoryMisAlginment_type;
  _factoryMisAlginment_type factoryMisAlginment;

   typedef uint8_t _servAlginUpdatesDone_type;
  _servAlginUpdatesDone_type servAlginUpdatesDone;

   typedef float _verticalMisAlginment_type;
  _verticalMisAlginment_type verticalMisAlginment;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus6_

typedef ::delphi_esr_msgs::EsrStatus6_<std::allocator<void> > EsrStatus6;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6 > EsrStatus6Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus6 const> EsrStatus6ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.supply1P8V == rhs.supply1P8V &&
    lhs.supplyN5V == rhs.supplyN5V &&
    lhs.waveDiffA2D == rhs.waveDiffA2D &&
    lhs.swVersionDSP3rdByte == rhs.swVersionDSP3rdByte &&
    lhs.verticalAlginUpdated == rhs.verticalAlginUpdated &&
    lhs.systemPowerMode == rhs.systemPowerMode &&
    lhs.foundTarget == rhs.foundTarget &&
    lhs.recommendUnconverge == rhs.recommendUnconverge &&
    lhs.factoryAlginStatus1 == rhs.factoryAlginStatus1 &&
    lhs.factoryAlginStatus2 == rhs.factoryAlginStatus2 &&
    lhs.factoryMisAlginment == rhs.factoryMisAlginment &&
    lhs.servAlginUpdatesDone == rhs.servAlginUpdatesDone &&
    lhs.verticalMisAlginment == rhs.verticalMisAlginment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fab6045bfaa2bc768f235e17159502ea";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfab6045bfaa2bc76ULL;
  static const uint64_t static_value2 = 0x8f235e17159502eaULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus6";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# ESR status6\n"
"string      canmsg\n"
"uint8       supply1P8V\n"
"uint8       supplyN5V\n"
"uint8       waveDiffA2D\n"
"uint8       swVersionDSP3rdByte\n"
"bool        verticalAlginUpdated\n"
"uint8       systemPowerMode\n"
"bool        foundTarget\n"
"bool        recommendUnconverge\n"
"uint8       factoryAlginStatus1\n"
"uint8       factoryAlginStatus2\n"
"float32     factoryMisAlginment\n"
"uint8       servAlginUpdatesDone\n"
"float32     verticalMisAlginment\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.supply1P8V);
      stream.next(m.supplyN5V);
      stream.next(m.waveDiffA2D);
      stream.next(m.swVersionDSP3rdByte);
      stream.next(m.verticalAlginUpdated);
      stream.next(m.systemPowerMode);
      stream.next(m.foundTarget);
      stream.next(m.recommendUnconverge);
      stream.next(m.factoryAlginStatus1);
      stream.next(m.factoryAlginStatus2);
      stream.next(m.factoryMisAlginment);
      stream.next(m.servAlginUpdatesDone);
      stream.next(m.verticalMisAlginment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus6_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus6_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.canmsg);
    s << indent << "supply1P8V: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply1P8V);
    s << indent << "supplyN5V: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supplyN5V);
    s << indent << "waveDiffA2D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waveDiffA2D);
    s << indent << "swVersionDSP3rdByte: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swVersionDSP3rdByte);
    s << indent << "verticalAlginUpdated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verticalAlginUpdated);
    s << indent << "systemPowerMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.systemPowerMode);
    s << indent << "foundTarget: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.foundTarget);
    s << indent << "recommendUnconverge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recommendUnconverge);
    s << indent << "factoryAlginStatus1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.factoryAlginStatus1);
    s << indent << "factoryAlginStatus2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.factoryAlginStatus2);
    s << indent << "factoryMisAlginment: ";
    Printer<float>::stream(s, indent + "  ", v.factoryMisAlginment);
    s << indent << "servAlginUpdatesDone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servAlginUpdatesDone);
    s << indent << "verticalMisAlginment: ";
    Printer<float>::stream(s, indent + "  ", v.verticalMisAlginment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS6_H
