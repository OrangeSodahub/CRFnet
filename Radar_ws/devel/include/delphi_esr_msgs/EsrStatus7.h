// Generated by gencpp from file delphi_esr_msgs/EsrStatus7.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS7_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS7_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus7_
{
  typedef EsrStatus7_<ContainerAllocator> Type;

  EsrStatus7_()
    : header()
    , canmsg()
    , activeFault0(0)
    , activeFault1(0)
    , activeFault2(0)
    , activeFault3(0)
    , activeFault4(0)
    , activeFault5(0)
    , activeFault6(0)
    , activeFault7(0)  {
    }
  EsrStatus7_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , activeFault0(0)
    , activeFault1(0)
    , activeFault2(0)
    , activeFault3(0)
    , activeFault4(0)
    , activeFault5(0)
    , activeFault6(0)
    , activeFault7(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _activeFault0_type;
  _activeFault0_type activeFault0;

   typedef uint8_t _activeFault1_type;
  _activeFault1_type activeFault1;

   typedef uint8_t _activeFault2_type;
  _activeFault2_type activeFault2;

   typedef uint8_t _activeFault3_type;
  _activeFault3_type activeFault3;

   typedef uint8_t _activeFault4_type;
  _activeFault4_type activeFault4;

   typedef uint8_t _activeFault5_type;
  _activeFault5_type activeFault5;

   typedef uint8_t _activeFault6_type;
  _activeFault6_type activeFault6;

   typedef uint8_t _activeFault7_type;
  _activeFault7_type activeFault7;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus7_

typedef ::delphi_esr_msgs::EsrStatus7_<std::allocator<void> > EsrStatus7;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7 > EsrStatus7Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus7 const> EsrStatus7ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.activeFault0 == rhs.activeFault0 &&
    lhs.activeFault1 == rhs.activeFault1 &&
    lhs.activeFault2 == rhs.activeFault2 &&
    lhs.activeFault3 == rhs.activeFault3 &&
    lhs.activeFault4 == rhs.activeFault4 &&
    lhs.activeFault5 == rhs.activeFault5 &&
    lhs.activeFault6 == rhs.activeFault6 &&
    lhs.activeFault7 == rhs.activeFault7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b04af575c0721e778fa727e03d332233";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb04af575c0721e77ULL;
  static const uint64_t static_value2 = 0x8fa727e03d332233ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus7";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# ESR status7\n"
"string      canmsg\n"
"uint8       activeFault0\n"
"uint8       activeFault1\n"
"uint8       activeFault2\n"
"uint8       activeFault3\n"
"uint8       activeFault4\n"
"uint8       activeFault5\n"
"uint8       activeFault6\n"
"uint8       activeFault7\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.activeFault0);
      stream.next(m.activeFault1);
      stream.next(m.activeFault2);
      stream.next(m.activeFault3);
      stream.next(m.activeFault4);
      stream.next(m.activeFault5);
      stream.next(m.activeFault6);
      stream.next(m.activeFault7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus7_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus7_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.canmsg);
    s << indent << "activeFault0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault0);
    s << indent << "activeFault1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault1);
    s << indent << "activeFault2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault2);
    s << indent << "activeFault3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault3);
    s << indent << "activeFault4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault4);
    s << indent << "activeFault5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault5);
    s << indent << "activeFault6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault6);
    s << indent << "activeFault7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFault7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS7_H
