// Generated by gencpp from file delphi_esr_msgs/EsrStatus5.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS5_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS5_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus5_
{
  typedef EsrStatus5_<ContainerAllocator> Type;

  EsrStatus5_()
    : header()
    , canmsg()
    , swbattA2D(0)
    , ignpA2D(0)
    , temp1A2D(0)
    , temp2A2D(0)
    , supply5VA(0)
    , supply5VDX(0)
    , supply53P3V(0)
    , supply10V(0)  {
    }
  EsrStatus5_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , swbattA2D(0)
    , ignpA2D(0)
    , temp1A2D(0)
    , temp2A2D(0)
    , supply5VA(0)
    , supply5VDX(0)
    , supply53P3V(0)
    , supply10V(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _swbattA2D_type;
  _swbattA2D_type swbattA2D;

   typedef uint8_t _ignpA2D_type;
  _ignpA2D_type ignpA2D;

   typedef uint8_t _temp1A2D_type;
  _temp1A2D_type temp1A2D;

   typedef uint8_t _temp2A2D_type;
  _temp2A2D_type temp2A2D;

   typedef uint8_t _supply5VA_type;
  _supply5VA_type supply5VA;

   typedef uint8_t _supply5VDX_type;
  _supply5VDX_type supply5VDX;

   typedef uint8_t _supply53P3V_type;
  _supply53P3V_type supply53P3V;

   typedef uint8_t _supply10V_type;
  _supply10V_type supply10V;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus5_

typedef ::delphi_esr_msgs::EsrStatus5_<std::allocator<void> > EsrStatus5;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus5 > EsrStatus5Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus5 const> EsrStatus5ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.swbattA2D == rhs.swbattA2D &&
    lhs.ignpA2D == rhs.ignpA2D &&
    lhs.temp1A2D == rhs.temp1A2D &&
    lhs.temp2A2D == rhs.temp2A2D &&
    lhs.supply5VA == rhs.supply5VA &&
    lhs.supply5VDX == rhs.supply5VDX &&
    lhs.supply53P3V == rhs.supply53P3V &&
    lhs.supply10V == rhs.supply10V;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aae12ba774492012b782362919f8cb63";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaae12ba774492012ULL;
  static const uint64_t static_value2 = 0xb782362919f8cb63ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus5";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# ESR status5\n"
"string      canmsg\n"
"uint8       swbattA2D\n"
"uint8       ignpA2D\n"
"uint8       temp1A2D\n"
"uint8       temp2A2D\n"
"uint8       supply5VA\n"
"uint8       supply5VDX\n"
"uint8       supply53P3V\n"
"uint8       supply10V\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.swbattA2D);
      stream.next(m.ignpA2D);
      stream.next(m.temp1A2D);
      stream.next(m.temp2A2D);
      stream.next(m.supply5VA);
      stream.next(m.supply5VDX);
      stream.next(m.supply53P3V);
      stream.next(m.supply10V);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus5_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus5_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.canmsg);
    s << indent << "swbattA2D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swbattA2D);
    s << indent << "ignpA2D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignpA2D);
    s << indent << "temp1A2D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp1A2D);
    s << indent << "temp2A2D: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp2A2D);
    s << indent << "supply5VA: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply5VA);
    s << indent << "supply5VDX: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply5VDX);
    s << indent << "supply53P3V: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply53P3V);
    s << indent << "supply10V: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supply10V);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS5_H
