// Generated by gencpp from file delphi_esr_msgs/EsrStatus2.msg
// DO NOT EDIT!


#ifndef DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS2_H
#define DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_esr_msgs
{
template <class ContainerAllocator>
struct EsrStatus2_
{
  typedef EsrStatus2_<ContainerAllocator> Type;

  EsrStatus2_()
    : header()
    , canmsg()
    , rollingCount2(0)
    , maxTrackAck(0)
    , overheatError(false)
    , rangePerfError(false)
    , internalError(false)
    , xcvrOperational(false)
    , rawDataMode(false)
    , steerAngleAck(0)
    , temperature(0)
    , spdCompFactor(0.0)
    , groupingMode(0)
    , yawRateBias(0.0)
    , swVersionDSP()  {
    }
  EsrStatus2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canmsg(_alloc)
    , rollingCount2(0)
    , maxTrackAck(0)
    , overheatError(false)
    , rangePerfError(false)
    , internalError(false)
    , xcvrOperational(false)
    , rawDataMode(false)
    , steerAngleAck(0)
    , temperature(0)
    , spdCompFactor(0.0)
    , groupingMode(0)
    , yawRateBias(0.0)
    , swVersionDSP(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _canmsg_type;
  _canmsg_type canmsg;

   typedef uint8_t _rollingCount2_type;
  _rollingCount2_type rollingCount2;

   typedef uint8_t _maxTrackAck_type;
  _maxTrackAck_type maxTrackAck;

   typedef uint8_t _overheatError_type;
  _overheatError_type overheatError;

   typedef uint8_t _rangePerfError_type;
  _rangePerfError_type rangePerfError;

   typedef uint8_t _internalError_type;
  _internalError_type internalError;

   typedef uint8_t _xcvrOperational_type;
  _xcvrOperational_type xcvrOperational;

   typedef uint8_t _rawDataMode_type;
  _rawDataMode_type rawDataMode;

   typedef uint16_t _steerAngleAck_type;
  _steerAngleAck_type steerAngleAck;

   typedef int8_t _temperature_type;
  _temperature_type temperature;

   typedef float _spdCompFactor_type;
  _spdCompFactor_type spdCompFactor;

   typedef uint8_t _groupingMode_type;
  _groupingMode_type groupingMode;

   typedef float _yawRateBias_type;
  _yawRateBias_type yawRateBias;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _swVersionDSP_type;
  _swVersionDSP_type swVersionDSP;





  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> const> ConstPtr;

}; // struct EsrStatus2_

typedef ::delphi_esr_msgs::EsrStatus2_<std::allocator<void> > EsrStatus2;

typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus2 > EsrStatus2Ptr;
typedef boost::shared_ptr< ::delphi_esr_msgs::EsrStatus2 const> EsrStatus2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.canmsg == rhs.canmsg &&
    lhs.rollingCount2 == rhs.rollingCount2 &&
    lhs.maxTrackAck == rhs.maxTrackAck &&
    lhs.overheatError == rhs.overheatError &&
    lhs.rangePerfError == rhs.rangePerfError &&
    lhs.internalError == rhs.internalError &&
    lhs.xcvrOperational == rhs.xcvrOperational &&
    lhs.rawDataMode == rhs.rawDataMode &&
    lhs.steerAngleAck == rhs.steerAngleAck &&
    lhs.temperature == rhs.temperature &&
    lhs.spdCompFactor == rhs.spdCompFactor &&
    lhs.groupingMode == rhs.groupingMode &&
    lhs.yawRateBias == rhs.yawRateBias &&
    lhs.swVersionDSP == rhs.swVersionDSP;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator1> & lhs, const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delphi_esr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bcf53fd3f623189a15116de844ce9791";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbcf53fd3f623189aULL;
  static const uint64_t static_value2 = 0x15116de844ce9791ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_esr_msgs/EsrStatus2";
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# ESR status2\n"
"string      canmsg\n"
"uint8       rollingCount2\n"
"uint8       maxTrackAck\n"
"bool        overheatError\n"
"bool        rangePerfError\n"
"bool        internalError\n"
"bool        xcvrOperational\n"
"bool        rawDataMode\n"
"uint16      steerAngleAck\n"
"int8        temperature\n"
"float32     spdCompFactor\n"
"uint8       groupingMode\n"
"float32     yawRateBias\n"
"string      swVersionDSP     \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canmsg);
      stream.next(m.rollingCount2);
      stream.next(m.maxTrackAck);
      stream.next(m.overheatError);
      stream.next(m.rangePerfError);
      stream.next(m.internalError);
      stream.next(m.xcvrOperational);
      stream.next(m.rawDataMode);
      stream.next(m.steerAngleAck);
      stream.next(m.temperature);
      stream.next(m.spdCompFactor);
      stream.next(m.groupingMode);
      stream.next(m.yawRateBias);
      stream.next(m.swVersionDSP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsrStatus2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_esr_msgs::EsrStatus2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.canmsg);
    s << indent << "rollingCount2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rollingCount2);
    s << indent << "maxTrackAck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maxTrackAck);
    s << indent << "overheatError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.overheatError);
    s << indent << "rangePerfError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rangePerfError);
    s << indent << "internalError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.internalError);
    s << indent << "xcvrOperational: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xcvrOperational);
    s << indent << "rawDataMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rawDataMode);
    s << indent << "steerAngleAck: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.steerAngleAck);
    s << indent << "temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "spdCompFactor: ";
    Printer<float>::stream(s, indent + "  ", v.spdCompFactor);
    s << indent << "groupingMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.groupingMode);
    s << indent << "yawRateBias: ";
    Printer<float>::stream(s, indent + "  ", v.yawRateBias);
    s << indent << "swVersionDSP: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.swVersionDSP);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_ESR_MSGS_MESSAGE_ESRSTATUS2_H
