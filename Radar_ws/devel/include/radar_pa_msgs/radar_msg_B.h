// Generated by gencpp from file radar_pa_msgs/radar_msg_B.msg
// DO NOT EDIT!


#ifndef RADAR_PA_MSGS_MESSAGE_RADAR_MSG_B_H
#define RADAR_PA_MSGS_MESSAGE_RADAR_MSG_B_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace radar_pa_msgs
{
template <class ContainerAllocator>
struct radar_msg_B_
{
  typedef radar_msg_B_<ContainerAllocator> Type;

  radar_msg_B_()
    : message(0)
    , ID(0)
    , distance_deviation(0.0)
    , velocity_deviation(0.0)
    , angle_deviation(0.0)
    , proability_target(0.0)
    , counter(0)  {
    }
  radar_msg_B_(const ContainerAllocator& _alloc)
    : message(0)
    , ID(0)
    , distance_deviation(0.0)
    , velocity_deviation(0.0)
    , angle_deviation(0.0)
    , proability_target(0.0)
    , counter(0)  {
  (void)_alloc;
    }



   typedef uint8_t _message_type;
  _message_type message;

   typedef uint32_t _ID_type;
  _ID_type ID;

   typedef float _distance_deviation_type;
  _distance_deviation_type distance_deviation;

   typedef float _velocity_deviation_type;
  _velocity_deviation_type velocity_deviation;

   typedef float _angle_deviation_type;
  _angle_deviation_type angle_deviation;

   typedef float _proability_target_type;
  _proability_target_type proability_target;

   typedef uint8_t _counter_type;
  _counter_type counter;





  typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> const> ConstPtr;

}; // struct radar_msg_B_

typedef ::radar_pa_msgs::radar_msg_B_<std::allocator<void> > radar_msg_B;

typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg_B > radar_msg_BPtr;
typedef boost::shared_ptr< ::radar_pa_msgs::radar_msg_B const> radar_msg_BConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator1> & lhs, const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator2> & rhs)
{
  return lhs.message == rhs.message &&
    lhs.ID == rhs.ID &&
    lhs.distance_deviation == rhs.distance_deviation &&
    lhs.velocity_deviation == rhs.velocity_deviation &&
    lhs.angle_deviation == rhs.angle_deviation &&
    lhs.proability_target == rhs.proability_target &&
    lhs.counter == rhs.counter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator1> & lhs, const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radar_pa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
{
  static const char* value()
  {
    return "596d24d33b8a883eb8423004f314ff5f";
  }

  static const char* value(const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x596d24d33b8a883eULL;
  static const uint64_t static_value2 = 0xb8423004f314ff5fULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_pa_msgs/radar_msg_B";
  }

  static const char* value(const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   message\n"
"uint32  ID\n"
"float32 distance_deviation\n"
"float32 velocity_deviation\n"
"float32 angle_deviation\n"
"float32 proability_target\n"
"uint8   counter\n"
;
  }

  static const char* value(const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.ID);
      stream.next(m.distance_deviation);
      stream.next(m.velocity_deviation);
      stream.next(m.angle_deviation);
      stream.next(m.proability_target);
      stream.next(m.counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_msg_B_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_pa_msgs::radar_msg_B_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_pa_msgs::radar_msg_B_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message);
    s << indent << "ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "distance_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.distance_deviation);
    s << indent << "velocity_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_deviation);
    s << indent << "angle_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.angle_deviation);
    s << indent << "proability_target: ";
    Printer<float>::stream(s, indent + "  ", v.proability_target);
    s << indent << "counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_PA_MSGS_MESSAGE_RADAR_MSG_B_H
