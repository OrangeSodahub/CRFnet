// Generated by gencpp from file msgs/MsgRadCam.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_MSGRADCAM_H
#define MSGS_MESSAGE_MSGRADCAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace msgs
{
template <class ContainerAllocator>
struct MsgRadCam_
{
  typedef MsgRadCam_<ContainerAllocator> Type;

  MsgRadCam_()
    : Header()
    , match_left(0.0)
    , radar_left(0.0)
    , camera_left(0.0)
    , match_right(0.0)
    , radar_right(0.0)
    , camera_right(0.0)  {
    }
  MsgRadCam_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , match_left(0.0)
    , radar_left(0.0)
    , camera_left(0.0)
    , match_right(0.0)
    , radar_right(0.0)
    , camera_right(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef float _match_left_type;
  _match_left_type match_left;

   typedef float _radar_left_type;
  _radar_left_type radar_left;

   typedef float _camera_left_type;
  _camera_left_type camera_left;

   typedef float _match_right_type;
  _match_right_type match_right;

   typedef float _radar_right_type;
  _radar_right_type radar_right;

   typedef float _camera_right_type;
  _camera_right_type camera_right;





  typedef boost::shared_ptr< ::msgs::MsgRadCam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::MsgRadCam_<ContainerAllocator> const> ConstPtr;

}; // struct MsgRadCam_

typedef ::msgs::MsgRadCam_<std::allocator<void> > MsgRadCam;

typedef boost::shared_ptr< ::msgs::MsgRadCam > MsgRadCamPtr;
typedef boost::shared_ptr< ::msgs::MsgRadCam const> MsgRadCamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::MsgRadCam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::MsgRadCam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::MsgRadCam_<ContainerAllocator1> & lhs, const ::msgs::MsgRadCam_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.match_left == rhs.match_left &&
    lhs.radar_left == rhs.radar_left &&
    lhs.camera_left == rhs.camera_left &&
    lhs.match_right == rhs.match_right &&
    lhs.radar_right == rhs.radar_right &&
    lhs.camera_right == rhs.camera_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::MsgRadCam_<ContainerAllocator1> & lhs, const ::msgs::MsgRadCam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::MsgRadCam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::MsgRadCam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::MsgRadCam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::MsgRadCam_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::MsgRadCam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::MsgRadCam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::MsgRadCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77843f8cca22df506f0bd8510a04bfe1";
  }

  static const char* value(const ::msgs::MsgRadCam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77843f8cca22df50ULL;
  static const uint64_t static_value2 = 0x6f0bd8510a04bfe1ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::MsgRadCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/MsgRadCam";
  }

  static const char* value(const ::msgs::MsgRadCam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::MsgRadCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n"
"float32 match_left\n"
"float32 radar_left\n"
"float32 camera_left\n"
"float32 match_right\n"
"float32 radar_right\n"
"float32 camera_right\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::msgs::MsgRadCam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::MsgRadCam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.match_left);
      stream.next(m.radar_left);
      stream.next(m.camera_left);
      stream.next(m.match_right);
      stream.next(m.radar_right);
      stream.next(m.camera_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgRadCam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::MsgRadCam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::MsgRadCam_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "match_left: ";
    Printer<float>::stream(s, indent + "  ", v.match_left);
    s << indent << "radar_left: ";
    Printer<float>::stream(s, indent + "  ", v.radar_left);
    s << indent << "camera_left: ";
    Printer<float>::stream(s, indent + "  ", v.camera_left);
    s << indent << "match_right: ";
    Printer<float>::stream(s, indent + "  ", v.match_right);
    s << indent << "radar_right: ";
    Printer<float>::stream(s, indent + "  ", v.radar_right);
    s << indent << "camera_right: ";
    Printer<float>::stream(s, indent + "  ", v.camera_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_MSGRADCAM_H
