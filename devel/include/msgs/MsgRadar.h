// Generated by gencpp from file msgs/MsgRadar.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_MSGRADAR_H
#define MSGS_MESSAGE_MSGRADAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <msgs/MsgRadarObject.h>
#include <msgs/MsgRadarObject.h>

namespace msgs
{
template <class ContainerAllocator>
struct MsgRadar_
{
  typedef MsgRadar_<ContainerAllocator> Type;

  MsgRadar_()
    : header()
    , num_left(0)
    , num_right(0)
    , objects_left()
    , objects_right()  {
    }
  MsgRadar_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_left(0)
    , num_right(0)
    , objects_left(_alloc)
    , objects_right(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _num_left_type;
  _num_left_type num_left;

   typedef uint8_t _num_right_type;
  _num_right_type num_right;

   typedef std::vector< ::msgs::MsgRadarObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msgs::MsgRadarObject_<ContainerAllocator> >::other >  _objects_left_type;
  _objects_left_type objects_left;

   typedef std::vector< ::msgs::MsgRadarObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msgs::MsgRadarObject_<ContainerAllocator> >::other >  _objects_right_type;
  _objects_right_type objects_right;





  typedef boost::shared_ptr< ::msgs::MsgRadar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::MsgRadar_<ContainerAllocator> const> ConstPtr;

}; // struct MsgRadar_

typedef ::msgs::MsgRadar_<std::allocator<void> > MsgRadar;

typedef boost::shared_ptr< ::msgs::MsgRadar > MsgRadarPtr;
typedef boost::shared_ptr< ::msgs::MsgRadar const> MsgRadarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::MsgRadar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::MsgRadar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::MsgRadar_<ContainerAllocator1> & lhs, const ::msgs::MsgRadar_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_left == rhs.num_left &&
    lhs.num_right == rhs.num_right &&
    lhs.objects_left == rhs.objects_left &&
    lhs.objects_right == rhs.objects_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::MsgRadar_<ContainerAllocator1> & lhs, const ::msgs::MsgRadar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::MsgRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::MsgRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::MsgRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::MsgRadar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::MsgRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::MsgRadar_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::MsgRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b60bab8d6e3388b4d94d6bd0bfb100f8";
  }

  static const char* value(const ::msgs::MsgRadar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb60bab8d6e3388b4ULL;
  static const uint64_t static_value2 = 0xd94d6bd0bfb100f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::MsgRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/MsgRadar";
  }

  static const char* value(const ::msgs::MsgRadar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::MsgRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 num_left\n"
"uint8 num_right\n"
"MsgRadarObject[] objects_left\n"
"MsgRadarObject[] objects_right\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: msgs/MsgRadarObject\n"
"Header header\n"
"float32 distance        # range\n"
"float32 velocity        # range rate\n"
"float32 angle_centroid\n"
"float32 pos_x           # obj_vcs_posx\n"
"float32 pos_y           # obj_vcs_posy\n"
"uint8 track_id\n"
;
  }

  static const char* value(const ::msgs::MsgRadar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::MsgRadar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_left);
      stream.next(m.num_right);
      stream.next(m.objects_left);
      stream.next(m.objects_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgRadar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::MsgRadar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::MsgRadar_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_left);
    s << indent << "num_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_right);
    s << indent << "objects_left[]" << std::endl;
    for (size_t i = 0; i < v.objects_left.size(); ++i)
    {
      s << indent << "  objects_left[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msgs::MsgRadarObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects_left[i]);
    }
    s << indent << "objects_right[]" << std::endl;
    for (size_t i = 0; i < v.objects_right.size(); ++i)
    {
      s << indent << "  objects_right[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msgs::MsgRadarObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects_right[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_MSGRADAR_H
