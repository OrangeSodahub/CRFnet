// Generated by gencpp from file msgs/MsgLidCam.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_MSGLIDCAM_H
#define MSGS_MESSAGE_MSGLIDCAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <msgs/MsgLidCamObject.h>
#include <msgs/MsgLidCamObject.h>

namespace msgs
{
template <class ContainerAllocator>
struct MsgLidCam_
{
  typedef MsgLidCam_<ContainerAllocator> Type;

  MsgLidCam_()
    : header()
    , num_circle(0)
    , num_intersection(0)
    , objects_circle()
    , objects_intersection()  {
    }
  MsgLidCam_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_circle(0)
    , num_intersection(0)
    , objects_circle(_alloc)
    , objects_intersection(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _num_circle_type;
  _num_circle_type num_circle;

   typedef uint8_t _num_intersection_type;
  _num_intersection_type num_intersection;

   typedef std::vector< ::msgs::MsgLidCamObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msgs::MsgLidCamObject_<ContainerAllocator> >::other >  _objects_circle_type;
  _objects_circle_type objects_circle;

   typedef std::vector< ::msgs::MsgLidCamObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msgs::MsgLidCamObject_<ContainerAllocator> >::other >  _objects_intersection_type;
  _objects_intersection_type objects_intersection;





  typedef boost::shared_ptr< ::msgs::MsgLidCam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::MsgLidCam_<ContainerAllocator> const> ConstPtr;

}; // struct MsgLidCam_

typedef ::msgs::MsgLidCam_<std::allocator<void> > MsgLidCam;

typedef boost::shared_ptr< ::msgs::MsgLidCam > MsgLidCamPtr;
typedef boost::shared_ptr< ::msgs::MsgLidCam const> MsgLidCamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::MsgLidCam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::MsgLidCam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::MsgLidCam_<ContainerAllocator1> & lhs, const ::msgs::MsgLidCam_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_circle == rhs.num_circle &&
    lhs.num_intersection == rhs.num_intersection &&
    lhs.objects_circle == rhs.objects_circle &&
    lhs.objects_intersection == rhs.objects_intersection;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::MsgLidCam_<ContainerAllocator1> & lhs, const ::msgs::MsgLidCam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::MsgLidCam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::MsgLidCam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::MsgLidCam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::MsgLidCam_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::MsgLidCam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::MsgLidCam_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::MsgLidCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92aac1a08f2584ca8ae9e3d8d796fb74";
  }

  static const char* value(const ::msgs::MsgLidCam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92aac1a08f2584caULL;
  static const uint64_t static_value2 = 0x8ae9e3d8d796fb74ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::MsgLidCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/MsgLidCam";
  }

  static const char* value(const ::msgs::MsgLidCam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::MsgLidCam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 num_circle\n"
"uint8 num_intersection\n"
"MsgLidCamObject[] objects_circle\n"
"MsgLidCamObject[] objects_intersection\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: msgs/MsgLidCamObject\n"
"Header header\n"
"float32 alpha\n"
"float32 pos_x           # obj_vcs_posx\n"
"float32 pos_y           # obj_vcs_posy\n"
"uint8 track_id\n"
;
  }

  static const char* value(const ::msgs::MsgLidCam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::MsgLidCam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_circle);
      stream.next(m.num_intersection);
      stream.next(m.objects_circle);
      stream.next(m.objects_intersection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgLidCam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::MsgLidCam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::MsgLidCam_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_circle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_circle);
    s << indent << "num_intersection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_intersection);
    s << indent << "objects_circle[]" << std::endl;
    for (size_t i = 0; i < v.objects_circle.size(); ++i)
    {
      s << indent << "  objects_circle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msgs::MsgLidCamObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects_circle[i]);
    }
    s << indent << "objects_intersection[]" << std::endl;
    for (size_t i = 0; i < v.objects_intersection.size(); ++i)
    {
      s << indent << "  objects_intersection[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msgs::MsgLidCamObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects_intersection[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_MSGLIDCAM_H
